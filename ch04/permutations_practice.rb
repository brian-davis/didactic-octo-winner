# https://stackoverflow.com/a/10556315
class Integer
  def factorial
    (2..self).reduce(1,:*)
  end
end

# As in Python: product(range(2), repeat=3) â†’ 000 001 010 011 100 101 110 111
# https://docs.python.org/3/library/itertools.html#itertools.product
# Ruby :
# a = (0...2).to_a # range(2) # just an example, need an array
# repeater = [[0,1],[0,1],[0,1]] # a, 3 times.
# >> [0,1].product([0,1],[0,1]) # must call .product as a method on an element object from repeater
# => [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]
def py_product_repeat(basis, repeat_n)
  repeater = repeat_n.times.with_object([]) { |_, a| a.push(basis) }
  repeater.shift.product(*repeater)
end

# For a total number of columns, find all unique column arrangements.
# Builds a list of lists containing all possible unique arrangements of
# individual column numbers including negative values for route direction
# Input:
# -total number of columns
# Returns:
# -list of lists of unique column orders including negative values for
# route cipher encryption direction

# Input total number of columns:
NUM_COLS = 4

# build list of lists of column number combinations
# return cartesian product of input iterables
# Take number of columns integer & generate pos & neg permutations.
def perms(columns)
  results = []

  basis = [-1,1]
  product = py_product_repeat(basis, columns.length)
  # puts "product: #{product}"

  for perm in columns.permutation
    for signs in product
      results.push(perm.zip(signs).map { |i, sign| i * sign })
    end
  end
  return results
end

# generate listing of individual column numbers
columns = (1..(NUM_COLS)).to_a
puts "columns: #{columns}"

col_combos = perms(columns)
puts col_combos.inspect
puts "Factorial of num_cols without negatives = #{NUM_COLS.factorial}"
puts "Number of column combinations = #{col_combos.length}"

# ðŸ¤– ch04 $ ruby permutations_practice.rb
# columns: [1, 2, 3, 4]
# [[-1, -2, -3, -4], [-1, -2, -3, 4], [-1, -2, 3, -4], [-1, -2, 3, 4], [-1, 2, -3, -4], [-1, 2, -3, 4], [-1, 2, 3, -4], [-1, 2, 3, 4], [1, -2, -3, -4], [1, -2, -3, 4], [1, -2, 3, -4], [1, -2, 3, 4], [1, 2, -3, -4], [1, 2, -3, 4], [1, 2, 3, -4], [1, 2, 3, 4], [-1, -2, -4, -3], [-1, -2, -4, 3], [-1, -2, 4, -3], [-1, -2, 4, 3], [-1, 2, -4, -3], [-1, 2, -4, 3], [-1, 2, 4, -3], [-1, 2, 4, 3], [1, -2, -4, -3], [1, -2, -4, 3], [1, -2, 4, -3], [1, -2, 4, 3], [1, 2, -4, -3], [1, 2, -4, 3], [1, 2, 4, -3], [1, 2, 4, 3], [-1, -3, -2, -4], [-1, -3, -2, 4], [-1, -3, 2, -4], [-1, -3, 2, 4], [-1, 3, -2, -4], [-1, 3, -2, 4], [-1, 3, 2, -4], [-1, 3, 2, 4], [1, -3, -2, -4], [1, -3, -2, 4], [1, -3, 2, -4], [1, -3, 2, 4], [1, 3, -2, -4], [1, 3, -2, 4], [1, 3, 2, -4], [1, 3, 2, 4], [-1, -3, -4, -2], [-1, -3, -4, 2], [-1, -3, 4, -2], [-1, -3, 4, 2], [-1, 3, -4, -2], [-1, 3, -4, 2], [-1, 3, 4, -2], [-1, 3, 4, 2], [1, -3, -4, -2], [1, -3, -4, 2], [1, -3, 4, -2], [1, -3, 4, 2], [1, 3, -4, -2], [1, 3, -4, 2], [1, 3, 4, -2], [1, 3, 4, 2], [-1, -4, -2, -3], [-1, -4, -2, 3], [-1, -4, 2, -3], [-1, -4, 2, 3], [-1, 4, -2, -3], [-1, 4, -2, 3], [-1, 4, 2, -3], [-1, 4, 2, 3], [1, -4, -2, -3], [1, -4, -2, 3], [1, -4, 2, -3], [1, -4, 2, 3], [1, 4, -2, -3], [1, 4, -2, 3], [1, 4, 2, -3], [1, 4, 2, 3], [-1, -4, -3, -2], [-1, -4, -3, 2], [-1, -4, 3, -2], [-1, -4, 3, 2], [-1, 4, -3, -2], [-1, 4, -3, 2], [-1, 4, 3, -2], [-1, 4, 3, 2], [1, -4, -3, -2], [1, -4, -3, 2], [1, -4, 3, -2], [1, -4, 3, 2], [1, 4, -3, -2], [1, 4, -3, 2], [1, 4, 3, -2], [1, 4, 3, 2], [-2, -1, -3, -4], [-2, -1, -3, 4], [-2, -1, 3, -4], [-2, -1, 3, 4], [-2, 1, -3, -4], [-2, 1, -3, 4], [-2, 1, 3, -4], [-2, 1, 3, 4], [2, -1, -3, -4], [2, -1, -3, 4], [2, -1, 3, -4], [2, -1, 3, 4], [2, 1, -3, -4], [2, 1, -3, 4], [2, 1, 3, -4], [2, 1, 3, 4], [-2, -1, -4, -3], [-2, -1, -4, 3], [-2, -1, 4, -3], [-2, -1, 4, 3], [-2, 1, -4, -3], [-2, 1, -4, 3], [-2, 1, 4, -3], [-2, 1, 4, 3], [2, -1, -4, -3], [2, -1, -4, 3], [2, -1, 4, -3], [2, -1, 4, 3], [2, 1, -4, -3], [2, 1, -4, 3], [2, 1, 4, -3], [2, 1, 4, 3], [-2, -3, -1, -4], [-2, -3, -1, 4], [-2, -3, 1, -4], [-2, -3, 1, 4], [-2, 3, -1, -4], [-2, 3, -1, 4], [-2, 3, 1, -4], [-2, 3, 1, 4], [2, -3, -1, -4], [2, -3, -1, 4], [2, -3, 1, -4], [2, -3, 1, 4], [2, 3, -1, -4], [2, 3, -1, 4], [2, 3, 1, -4], [2, 3, 1, 4], [-2, -3, -4, -1], [-2, -3, -4, 1], [-2, -3, 4, -1], [-2, -3, 4, 1], [-2, 3, -4, -1], [-2, 3, -4, 1], [-2, 3, 4, -1], [-2, 3, 4, 1], [2, -3, -4, -1], [2, -3, -4, 1], [2, -3, 4, -1], [2, -3, 4, 1], [2, 3, -4, -1], [2, 3, -4, 1], [2, 3, 4, -1], [2, 3, 4, 1], [-2, -4, -1, -3], [-2, -4, -1, 3], [-2, -4, 1, -3], [-2, -4, 1, 3], [-2, 4, -1, -3], [-2, 4, -1, 3], [-2, 4, 1, -3], [-2, 4, 1, 3], [2, -4, -1, -3], [2, -4, -1, 3], [2, -4, 1, -3], [2, -4, 1, 3], [2, 4, -1, -3], [2, 4, -1, 3], [2, 4, 1, -3], [2, 4, 1, 3], [-2, -4, -3, -1], [-2, -4, -3, 1], [-2, -4, 3, -1], [-2, -4, 3, 1], [-2, 4, -3, -1], [-2, 4, -3, 1], [-2, 4, 3, -1], [-2, 4, 3, 1], [2, -4, -3, -1], [2, -4, -3, 1], [2, -4, 3, -1], [2, -4, 3, 1], [2, 4, -3, -1], [2, 4, -3, 1], [2, 4, 3, -1], [2, 4, 3, 1], [-3, -1, -2, -4], [-3, -1, -2, 4], [-3, -1, 2, -4], [-3, -1, 2, 4], [-3, 1, -2, -4], [-3, 1, -2, 4], [-3, 1, 2, -4], [-3, 1, 2, 4], [3, -1, -2, -4], [3, -1, -2, 4], [3, -1, 2, -4], [3, -1, 2, 4], [3, 1, -2, -4], [3, 1, -2, 4], [3, 1, 2, -4], [3, 1, 2, 4], [-3, -1, -4, -2], [-3, -1, -4, 2], [-3, -1, 4, -2], [-3, -1, 4, 2], [-3, 1, -4, -2], [-3, 1, -4, 2], [-3, 1, 4, -2], [-3, 1, 4, 2], [3, -1, -4, -2], [3, -1, -4, 2], [3, -1, 4, -2], [3, -1, 4, 2], [3, 1, -4, -2], [3, 1, -4, 2], [3, 1, 4, -2], [3, 1, 4, 2], [-3, -2, -1, -4], [-3, -2, -1, 4], [-3, -2, 1, -4], [-3, -2, 1, 4], [-3, 2, -1, -4], [-3, 2, -1, 4], [-3, 2, 1, -4], [-3, 2, 1, 4], [3, -2, -1, -4], [3, -2, -1, 4], [3, -2, 1, -4], [3, -2, 1, 4], [3, 2, -1, -4], [3, 2, -1, 4], [3, 2, 1, -4], [3, 2, 1, 4], [-3, -2, -4, -1], [-3, -2, -4, 1], [-3, -2, 4, -1], [-3, -2, 4, 1], [-3, 2, -4, -1], [-3, 2, -4, 1], [-3, 2, 4, -1], [-3, 2, 4, 1], [3, -2, -4, -1], [3, -2, -4, 1], [3, -2, 4, -1], [3, -2, 4, 1], [3, 2, -4, -1], [3, 2, -4, 1], [3, 2, 4, -1], [3, 2, 4, 1], [-3, -4, -1, -2], [-3, -4, -1, 2], [-3, -4, 1, -2], [-3, -4, 1, 2], [-3, 4, -1, -2], [-3, 4, -1, 2], [-3, 4, 1, -2], [-3, 4, 1, 2], [3, -4, -1, -2], [3, -4, -1, 2], [3, -4, 1, -2], [3, -4, 1, 2], [3, 4, -1, -2], [3, 4, -1, 2], [3, 4, 1, -2], [3, 4, 1, 2], [-3, -4, -2, -1], [-3, -4, -2, 1], [-3, -4, 2, -1], [-3, -4, 2, 1], [-3, 4, -2, -1], [-3, 4, -2, 1], [-3, 4, 2, -1], [-3, 4, 2, 1], [3, -4, -2, -1], [3, -4, -2, 1], [3, -4, 2, -1], [3, -4, 2, 1], [3, 4, -2, -1], [3, 4, -2, 1], [3, 4, 2, -1], [3, 4, 2, 1], [-4, -1, -2, -3], [-4, -1, -2, 3], [-4, -1, 2, -3], [-4, -1, 2, 3], [-4, 1, -2, -3], [-4, 1, -2, 3], [-4, 1, 2, -3], [-4, 1, 2, 3], [4, -1, -2, -3], [4, -1, -2, 3], [4, -1, 2, -3], [4, -1, 2, 3], [4, 1, -2, -3], [4, 1, -2, 3], [4, 1, 2, -3], [4, 1, 2, 3], [-4, -1, -3, -2], [-4, -1, -3, 2], [-4, -1, 3, -2], [-4, -1, 3, 2], [-4, 1, -3, -2], [-4, 1, -3, 2], [-4, 1, 3, -2], [-4, 1, 3, 2], [4, -1, -3, -2], [4, -1, -3, 2], [4, -1, 3, -2], [4, -1, 3, 2], [4, 1, -3, -2], [4, 1, -3, 2], [4, 1, 3, -2], [4, 1, 3, 2], [-4, -2, -1, -3], [-4, -2, -1, 3], [-4, -2, 1, -3], [-4, -2, 1, 3], [-4, 2, -1, -3], [-4, 2, -1, 3], [-4, 2, 1, -3], [-4, 2, 1, 3], [4, -2, -1, -3], [4, -2, -1, 3], [4, -2, 1, -3], [4, -2, 1, 3], [4, 2, -1, -3], [4, 2, -1, 3], [4, 2, 1, -3], [4, 2, 1, 3], [-4, -2, -3, -1], [-4, -2, -3, 1], [-4, -2, 3, -1], [-4, -2, 3, 1], [-4, 2, -3, -1], [-4, 2, -3, 1], [-4, 2, 3, -1], [-4, 2, 3, 1], [4, -2, -3, -1], [4, -2, -3, 1], [4, -2, 3, -1], [4, -2, 3, 1], [4, 2, -3, -1], [4, 2, -3, 1], [4, 2, 3, -1], [4, 2, 3, 1], [-4, -3, -1, -2], [-4, -3, -1, 2], [-4, -3, 1, -2], [-4, -3, 1, 2], [-4, 3, -1, -2], [-4, 3, -1, 2], [-4, 3, 1, -2], [-4, 3, 1, 2], [4, -3, -1, -2], [4, -3, -1, 2], [4, -3, 1, -2], [4, -3, 1, 2], [4, 3, -1, -2], [4, 3, -1, 2], [4, 3, 1, -2], [4, 3, 1, 2], [-4, -3, -2, -1], [-4, -3, -2, 1], [-4, -3, 2, -1], [-4, -3, 2, 1], [-4, 3, -2, -1], [-4, 3, -2, 1], [-4, 3, 2, -1], [-4, 3, 2, 1], [4, -3, -2, -1], [4, -3, -2, 1], [4, -3, 2, -1], [4, -3, 2, 1], [4, 3, -2, -1], [4, 3, -2, 1], [4, 3, 2, -1], [4, 3, 2, 1]]
# Factorial of num_cols without negatives = 24
# Number of column combinations = 384
